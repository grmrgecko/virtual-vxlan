// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: vxlan/vxlan.proto

package vxlan

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Standard empty message.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_vxlan_vxlan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{0}
}

// Response to is applying config.
type IsApplyingConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsApplying    bool                   `protobuf:"varint,1,opt,name=isApplying,proto3" json:"isApplying,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsApplyingConfigReply) Reset() {
	*x = IsApplyingConfigReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsApplyingConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsApplyingConfigReply) ProtoMessage() {}

func (x *IsApplyingConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsApplyingConfigReply.ProtoReflect.Descriptor instead.
func (*IsApplyingConfigReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{1}
}

func (x *IsApplyingConfigReply) GetIsApplying() bool {
	if x != nil {
		return x.IsApplying
	}
	return false
}

// Listener messages.
type ListenerRequestWithName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerRequestWithName) Reset() {
	*x = ListenerRequestWithName{}
	mi := &file_vxlan_vxlan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerRequestWithName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerRequestWithName) ProtoMessage() {}

func (x *ListenerRequestWithName) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerRequestWithName.ProtoReflect.Descriptor instead.
func (*ListenerRequestWithName) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{2}
}

func (x *ListenerRequestWithName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Listener struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address        string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	MaxMessageSize int32                  `protobuf:"varint,3,opt,name=maxMessageSize,proto3" json:"maxMessageSize,omitempty"`
	Permanent      bool                   `protobuf:"varint,4,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Listener) Reset() {
	*x = Listener{}
	mi := &file_vxlan_vxlan_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{3}
}

func (x *Listener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Listener) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Listener) GetMaxMessageSize() int32 {
	if x != nil {
		return x.MaxMessageSize
	}
	return 0
}

func (x *Listener) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type ListListenersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Listeners     []*Listener            `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListListenersReply) Reset() {
	*x = ListListenersReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListListenersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListListenersReply) ProtoMessage() {}

func (x *ListListenersReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListListenersReply.ProtoReflect.Descriptor instead.
func (*ListListenersReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{4}
}

func (x *ListListenersReply) GetListeners() []*Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type ListenerMaxMessageSizeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerMaxMessageSizeRequest) Reset() {
	*x = ListenerMaxMessageSizeRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerMaxMessageSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerMaxMessageSizeRequest) ProtoMessage() {}

func (x *ListenerMaxMessageSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerMaxMessageSizeRequest.ProtoReflect.Descriptor instead.
func (*ListenerMaxMessageSizeRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{5}
}

func (x *ListenerMaxMessageSizeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListenerMaxMessageSizeRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListenerMaxMessageSizeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Size          int32                  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerMaxMessageSizeReply) Reset() {
	*x = ListenerMaxMessageSizeReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerMaxMessageSizeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerMaxMessageSizeReply) ProtoMessage() {}

func (x *ListenerMaxMessageSizeReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerMaxMessageSizeReply.ProtoReflect.Descriptor instead.
func (*ListenerMaxMessageSizeReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{6}
}

func (x *ListenerMaxMessageSizeReply) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Interface messages.
type Interface struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Vni           uint32                 `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	Mtu           int32                  `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Permanent     bool                   `protobuf:"varint,4,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Interface) Reset() {
	*x = Interface{}
	mi := &file_vxlan_vxlan_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{7}
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *Interface) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Interface) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type ListInterfacesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interfaces    []*Interface           `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInterfacesReply) Reset() {
	*x = ListInterfacesReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInterfacesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfacesReply) ProtoMessage() {}

func (x *ListInterfacesReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfacesReply.ProtoReflect.Descriptor instead.
func (*ListInterfacesReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{8}
}

func (x *ListInterfacesReply) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type AddInterfaceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Vni           uint32                 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Mtu           int32                  `protobuf:"varint,4,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Permanent     bool                   `protobuf:"varint,5,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddInterfaceRequest) Reset() {
	*x = AddInterfaceRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInterfaceRequest) ProtoMessage() {}

func (x *AddInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInterfaceRequest.ProtoReflect.Descriptor instead.
func (*AddInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{9}
}

func (x *AddInterfaceRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *AddInterfaceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddInterfaceRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *AddInterfaceRequest) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *AddInterfaceRequest) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type InterfaceRequestWithName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceRequestWithName) Reset() {
	*x = InterfaceRequestWithName{}
	mi := &file_vxlan_vxlan_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceRequestWithName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceRequestWithName) ProtoMessage() {}

func (x *InterfaceRequestWithName) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceRequestWithName.ProtoReflect.Descriptor instead.
func (*InterfaceRequestWithName) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{10}
}

func (x *InterfaceRequestWithName) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceRequestWithName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InterfaceMTURequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mtu           int32                  `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceMTURequest) Reset() {
	*x = InterfaceMTURequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceMTURequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMTURequest) ProtoMessage() {}

func (x *InterfaceMTURequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMTURequest.ProtoReflect.Descriptor instead.
func (*InterfaceMTURequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{11}
}

func (x *InterfaceMTURequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceMTURequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceMTURequest) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type InterfaceMTUReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mtu           int32                  `protobuf:"varint,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceMTUReply) Reset() {
	*x = InterfaceMTUReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceMTUReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMTUReply) ProtoMessage() {}

func (x *InterfaceMTUReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMTUReply.ProtoReflect.Descriptor instead.
func (*InterfaceMTUReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{12}
}

func (x *InterfaceMTUReply) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type InterfaceMACAddressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mac           string                 `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceMACAddressRequest) Reset() {
	*x = InterfaceMACAddressRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceMACAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMACAddressRequest) ProtoMessage() {}

func (x *InterfaceMACAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMACAddressRequest.ProtoReflect.Descriptor instead.
func (*InterfaceMACAddressRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{13}
}

func (x *InterfaceMACAddressRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceMACAddressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceMACAddressRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type InterfaceMACAddressReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mac           string                 `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceMACAddressReply) Reset() {
	*x = InterfaceMACAddressReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceMACAddressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMACAddressReply) ProtoMessage() {}

func (x *InterfaceMACAddressReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMACAddressReply.ProtoReflect.Descriptor instead.
func (*InterfaceMACAddressReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{14}
}

func (x *InterfaceMACAddressReply) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type InterfaceIPAddressesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IpAddress     []string               `protobuf:"bytes,3,rep,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceIPAddressesRequest) Reset() {
	*x = InterfaceIPAddressesRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceIPAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceIPAddressesRequest) ProtoMessage() {}

func (x *InterfaceIPAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceIPAddressesRequest.ProtoReflect.Descriptor instead.
func (*InterfaceIPAddressesRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{15}
}

func (x *InterfaceIPAddressesRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceIPAddressesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceIPAddressesRequest) GetIpAddress() []string {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

type InterfaceIPAddressesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpAddress     []string               `protobuf:"bytes,1,rep,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceIPAddressesReply) Reset() {
	*x = InterfaceIPAddressesReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceIPAddressesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceIPAddressesReply) ProtoMessage() {}

func (x *InterfaceIPAddressesReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceIPAddressesReply.ProtoReflect.Descriptor instead.
func (*InterfaceIPAddressesReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{16}
}

func (x *InterfaceIPAddressesReply) GetIpAddress() []string {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

type InterfaceMacEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mac           string                 `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Destination   string                 `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	Permanent     bool                   `protobuf:"varint,5,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceMacEntryRequest) Reset() {
	*x = InterfaceMacEntryRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceMacEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMacEntryRequest) ProtoMessage() {}

func (x *InterfaceMacEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMacEntryRequest.ProtoReflect.Descriptor instead.
func (*InterfaceMacEntryRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{17}
}

func (x *InterfaceMacEntryRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceMacEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceMacEntryRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *InterfaceMacEntryRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *InterfaceMacEntryRequest) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type InterfaceRemoveMacEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mac           string                 `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Destination   string                 `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceRemoveMacEntryRequest) Reset() {
	*x = InterfaceRemoveMacEntryRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceRemoveMacEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceRemoveMacEntryRequest) ProtoMessage() {}

func (x *InterfaceRemoveMacEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceRemoveMacEntryRequest.ProtoReflect.Descriptor instead.
func (*InterfaceRemoveMacEntryRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{18}
}

func (x *InterfaceRemoveMacEntryRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceRemoveMacEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceRemoveMacEntryRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *InterfaceRemoveMacEntryRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type MacEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mac           string                 `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Destination   string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Permanent     bool                   `protobuf:"varint,3,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MacEntry) Reset() {
	*x = MacEntry{}
	mi := &file_vxlan_vxlan_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MacEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacEntry) ProtoMessage() {}

func (x *MacEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacEntry.ProtoReflect.Descriptor instead.
func (*MacEntry) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{19}
}

func (x *MacEntry) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *MacEntry) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MacEntry) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type InterfaceMacEntryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*MacEntry            `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceMacEntryReply) Reset() {
	*x = InterfaceMacEntryReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceMacEntryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMacEntryReply) ProtoMessage() {}

func (x *InterfaceMacEntryReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMacEntryReply.ProtoReflect.Descriptor instead.
func (*InterfaceMacEntryReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{20}
}

func (x *InterfaceMacEntryReply) GetEntries() []*MacEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type InterfaceAddStaticRouteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Destination   string                 `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Gateway       string                 `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Metric        int32                  `protobuf:"varint,5,opt,name=metric,proto3" json:"metric,omitempty"`
	Permanent     bool                   `protobuf:"varint,6,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceAddStaticRouteRequest) Reset() {
	*x = InterfaceAddStaticRouteRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceAddStaticRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAddStaticRouteRequest) ProtoMessage() {}

func (x *InterfaceAddStaticRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAddStaticRouteRequest.ProtoReflect.Descriptor instead.
func (*InterfaceAddStaticRouteRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{21}
}

func (x *InterfaceAddStaticRouteRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceAddStaticRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceAddStaticRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *InterfaceAddStaticRouteRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *InterfaceAddStaticRouteRequest) GetMetric() int32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *InterfaceAddStaticRouteRequest) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type InterfaceRemoveStaticRouteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Destination   string                 `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Gateway       string                 `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceRemoveStaticRouteRequest) Reset() {
	*x = InterfaceRemoveStaticRouteRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceRemoveStaticRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceRemoveStaticRouteRequest) ProtoMessage() {}

func (x *InterfaceRemoveStaticRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceRemoveStaticRouteRequest.ProtoReflect.Descriptor instead.
func (*InterfaceRemoveStaticRouteRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{22}
}

func (x *InterfaceRemoveStaticRouteRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceRemoveStaticRouteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceRemoveStaticRouteRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *InterfaceRemoveStaticRouteRequest) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type StaticRoute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Destination   string                 `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Gateway       string                 `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Metric        int32                  `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Permanent     bool                   `protobuf:"varint,4,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StaticRoute) Reset() {
	*x = StaticRoute{}
	mi := &file_vxlan_vxlan_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRoute) ProtoMessage() {}

func (x *StaticRoute) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRoute.ProtoReflect.Descriptor instead.
func (*StaticRoute) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{23}
}

func (x *StaticRoute) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *StaticRoute) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *StaticRoute) GetMetric() int32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *StaticRoute) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type InterfaceStaticRouteReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Routes        []*StaticRoute         `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceStaticRouteReply) Reset() {
	*x = InterfaceStaticRouteReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceStaticRouteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStaticRouteReply) ProtoMessage() {}

func (x *InterfaceStaticRouteReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStaticRouteReply.ProtoReflect.Descriptor instead.
func (*InterfaceStaticRouteReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{24}
}

func (x *InterfaceStaticRouteReply) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

type InterfaceARPEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Mac           string                 `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	Permanent     bool                   `protobuf:"varint,5,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceARPEntryRequest) Reset() {
	*x = InterfaceARPEntryRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceARPEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceARPEntryRequest) ProtoMessage() {}

func (x *InterfaceARPEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceARPEntryRequest.ProtoReflect.Descriptor instead.
func (*InterfaceARPEntryRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{25}
}

func (x *InterfaceARPEntryRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceARPEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceARPEntryRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *InterfaceARPEntryRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *InterfaceARPEntryRequest) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type InterfaceRemoveARPEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenerName  string                 `protobuf:"bytes,1,opt,name=listenerName,proto3" json:"listenerName,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceRemoveARPEntryRequest) Reset() {
	*x = InterfaceRemoveARPEntryRequest{}
	mi := &file_vxlan_vxlan_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceRemoveARPEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceRemoveARPEntryRequest) ProtoMessage() {}

func (x *InterfaceRemoveARPEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceRemoveARPEntryRequest.ProtoReflect.Descriptor instead.
func (*InterfaceRemoveARPEntryRequest) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{26}
}

func (x *InterfaceRemoveARPEntryRequest) GetListenerName() string {
	if x != nil {
		return x.ListenerName
	}
	return ""
}

func (x *InterfaceRemoveARPEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceRemoveARPEntryRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ArpEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Mac           string                 `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Expires       string                 `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`
	Permanent     bool                   `protobuf:"varint,4,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArpEntry) Reset() {
	*x = ArpEntry{}
	mi := &file_vxlan_vxlan_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArpEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArpEntry) ProtoMessage() {}

func (x *ArpEntry) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArpEntry.ProtoReflect.Descriptor instead.
func (*ArpEntry) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{27}
}

func (x *ArpEntry) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ArpEntry) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *ArpEntry) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *ArpEntry) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type InterfaceArpEntryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*ArpEntry            `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceArpEntryReply) Reset() {
	*x = InterfaceArpEntryReply{}
	mi := &file_vxlan_vxlan_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceArpEntryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceArpEntryReply) ProtoMessage() {}

func (x *InterfaceArpEntryReply) ProtoReflect() protoreflect.Message {
	mi := &file_vxlan_vxlan_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceArpEntryReply.ProtoReflect.Descriptor instead.
func (*InterfaceArpEntryReply) Descriptor() ([]byte, []int) {
	return file_vxlan_vxlan_proto_rawDescGZIP(), []int{28}
}

func (x *InterfaceArpEntryReply) GetEntries() []*ArpEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_vxlan_vxlan_proto protoreflect.FileDescriptor

var file_vxlan_vxlan_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x37, 0x0a, 0x15, 0x49, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2d, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0x47, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x31, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x61, 0x0a, 0x09,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22,
	0x47, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x18, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f,
	0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x54, 0x55, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22,
	0x25, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x54, 0x55, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x66, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x2c,
	0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x73, 0x0a, 0x1b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x39, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa4, 0x01, 0x0a,
	0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74,
	0x22, 0x43, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x7f, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a,
	0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x52, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x52, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6e, 0x0a, 0x08, 0x41, 0x72, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x16, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x41, 0x72, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x32, 0xd5,
	0x10, 0x0a, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x10, 0x49, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x73, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12,
	0x0f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x22, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1a, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x54, 0x55, 0x12, 0x1a, 0x2e, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x54, 0x55,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x54, 0x55, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x18, 0x2e, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x54, 0x55,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x20, 0x2e,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x4d, 0x41, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x17, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x41, 0x43,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x16,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4d, 0x41, 0x43, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x41, 0x43, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x25,
	0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x20, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x41, 0x52, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x52,
	0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x52, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x52, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x41,
	0x52, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x2e, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x72, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x16, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x52, 0x50,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0c, 0x2e, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x6d, 0x72, 0x67, 0x65, 0x63, 0x6b, 0x6f, 0x2f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x2d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x2f, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vxlan_vxlan_proto_rawDescOnce sync.Once
	file_vxlan_vxlan_proto_rawDescData = file_vxlan_vxlan_proto_rawDesc
)

func file_vxlan_vxlan_proto_rawDescGZIP() []byte {
	file_vxlan_vxlan_proto_rawDescOnce.Do(func() {
		file_vxlan_vxlan_proto_rawDescData = protoimpl.X.CompressGZIP(file_vxlan_vxlan_proto_rawDescData)
	})
	return file_vxlan_vxlan_proto_rawDescData
}

var file_vxlan_vxlan_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_vxlan_vxlan_proto_goTypes = []any{
	(*Empty)(nil),                             // 0: vxlan.Empty
	(*IsApplyingConfigReply)(nil),             // 1: vxlan.IsApplyingConfigReply
	(*ListenerRequestWithName)(nil),           // 2: vxlan.ListenerRequestWithName
	(*Listener)(nil),                          // 3: vxlan.Listener
	(*ListListenersReply)(nil),                // 4: vxlan.ListListenersReply
	(*ListenerMaxMessageSizeRequest)(nil),     // 5: vxlan.ListenerMaxMessageSizeRequest
	(*ListenerMaxMessageSizeReply)(nil),       // 6: vxlan.ListenerMaxMessageSizeReply
	(*Interface)(nil),                         // 7: vxlan.Interface
	(*ListInterfacesReply)(nil),               // 8: vxlan.ListInterfacesReply
	(*AddInterfaceRequest)(nil),               // 9: vxlan.AddInterfaceRequest
	(*InterfaceRequestWithName)(nil),          // 10: vxlan.InterfaceRequestWithName
	(*InterfaceMTURequest)(nil),               // 11: vxlan.InterfaceMTURequest
	(*InterfaceMTUReply)(nil),                 // 12: vxlan.InterfaceMTUReply
	(*InterfaceMACAddressRequest)(nil),        // 13: vxlan.InterfaceMACAddressRequest
	(*InterfaceMACAddressReply)(nil),          // 14: vxlan.InterfaceMACAddressReply
	(*InterfaceIPAddressesRequest)(nil),       // 15: vxlan.InterfaceIPAddressesRequest
	(*InterfaceIPAddressesReply)(nil),         // 16: vxlan.InterfaceIPAddressesReply
	(*InterfaceMacEntryRequest)(nil),          // 17: vxlan.InterfaceMacEntryRequest
	(*InterfaceRemoveMacEntryRequest)(nil),    // 18: vxlan.InterfaceRemoveMacEntryRequest
	(*MacEntry)(nil),                          // 19: vxlan.MacEntry
	(*InterfaceMacEntryReply)(nil),            // 20: vxlan.InterfaceMacEntryReply
	(*InterfaceAddStaticRouteRequest)(nil),    // 21: vxlan.InterfaceAddStaticRouteRequest
	(*InterfaceRemoveStaticRouteRequest)(nil), // 22: vxlan.InterfaceRemoveStaticRouteRequest
	(*StaticRoute)(nil),                       // 23: vxlan.StaticRoute
	(*InterfaceStaticRouteReply)(nil),         // 24: vxlan.InterfaceStaticRouteReply
	(*InterfaceARPEntryRequest)(nil),          // 25: vxlan.InterfaceARPEntryRequest
	(*InterfaceRemoveARPEntryRequest)(nil),    // 26: vxlan.InterfaceRemoveARPEntryRequest
	(*ArpEntry)(nil),                          // 27: vxlan.ArpEntry
	(*InterfaceArpEntryReply)(nil),            // 28: vxlan.InterfaceArpEntryReply
}
var file_vxlan_vxlan_proto_depIdxs = []int32{
	3,  // 0: vxlan.ListListenersReply.listeners:type_name -> vxlan.Listener
	7,  // 1: vxlan.ListInterfacesReply.interfaces:type_name -> vxlan.Interface
	19, // 2: vxlan.InterfaceMacEntryReply.entries:type_name -> vxlan.MacEntry
	23, // 3: vxlan.InterfaceStaticRouteReply.routes:type_name -> vxlan.StaticRoute
	27, // 4: vxlan.InterfaceArpEntryReply.entries:type_name -> vxlan.ArpEntry
	0,  // 5: vxlan.vxlan.SaveConfig:input_type -> vxlan.Empty
	0,  // 6: vxlan.vxlan.ReloadConfig:input_type -> vxlan.Empty
	0,  // 7: vxlan.vxlan.IsApplyingConfig:input_type -> vxlan.Empty
	0,  // 8: vxlan.vxlan.ListListeners:input_type -> vxlan.Empty
	3,  // 9: vxlan.vxlan.AddListener:input_type -> vxlan.Listener
	2,  // 10: vxlan.vxlan.RemoveListener:input_type -> vxlan.ListenerRequestWithName
	5,  // 11: vxlan.vxlan.SetListenerMaxMessageSize:input_type -> vxlan.ListenerMaxMessageSizeRequest
	2,  // 12: vxlan.vxlan.GetListenerMaxMessageSize:input_type -> vxlan.ListenerRequestWithName
	2,  // 13: vxlan.vxlan.ListInterfaces:input_type -> vxlan.ListenerRequestWithName
	9,  // 14: vxlan.vxlan.AddInterface:input_type -> vxlan.AddInterfaceRequest
	10, // 15: vxlan.vxlan.RemoveInterface:input_type -> vxlan.InterfaceRequestWithName
	11, // 16: vxlan.vxlan.SetInterfaceMTU:input_type -> vxlan.InterfaceMTURequest
	10, // 17: vxlan.vxlan.GetInterfaceMTU:input_type -> vxlan.InterfaceRequestWithName
	13, // 18: vxlan.vxlan.SetInterfaceMACAddress:input_type -> vxlan.InterfaceMACAddressRequest
	10, // 19: vxlan.vxlan.GetInterfaceMACAddress:input_type -> vxlan.InterfaceRequestWithName
	15, // 20: vxlan.vxlan.SetInterfaceIPAddresses:input_type -> vxlan.InterfaceIPAddressesRequest
	10, // 21: vxlan.vxlan.GetInterfaceIPAddresses:input_type -> vxlan.InterfaceRequestWithName
	17, // 22: vxlan.vxlan.InterfaceAddMACEntry:input_type -> vxlan.InterfaceMacEntryRequest
	18, // 23: vxlan.vxlan.InterfaceRemoveMACEntry:input_type -> vxlan.InterfaceRemoveMacEntryRequest
	10, // 24: vxlan.vxlan.InterfaceGetMACEntries:input_type -> vxlan.InterfaceRequestWithName
	10, // 25: vxlan.vxlan.InterfaceFlushMACTable:input_type -> vxlan.InterfaceRequestWithName
	21, // 26: vxlan.vxlan.InterfaceAddStaticRoute:input_type -> vxlan.InterfaceAddStaticRouteRequest
	22, // 27: vxlan.vxlan.InterfaceRemoveStaticRoute:input_type -> vxlan.InterfaceRemoveStaticRouteRequest
	10, // 28: vxlan.vxlan.InterfaceGetStaticRoutes:input_type -> vxlan.InterfaceRequestWithName
	25, // 29: vxlan.vxlan.InterfaceAddStaticARPEntry:input_type -> vxlan.InterfaceARPEntryRequest
	26, // 30: vxlan.vxlan.InterfaceRemoveARPEntry:input_type -> vxlan.InterfaceRemoveARPEntryRequest
	10, // 31: vxlan.vxlan.InterfaceGetARPEntries:input_type -> vxlan.InterfaceRequestWithName
	10, // 32: vxlan.vxlan.InterfaceFlushARPTable:input_type -> vxlan.InterfaceRequestWithName
	0,  // 33: vxlan.vxlan.SaveConfig:output_type -> vxlan.Empty
	0,  // 34: vxlan.vxlan.ReloadConfig:output_type -> vxlan.Empty
	1,  // 35: vxlan.vxlan.IsApplyingConfig:output_type -> vxlan.IsApplyingConfigReply
	4,  // 36: vxlan.vxlan.ListListeners:output_type -> vxlan.ListListenersReply
	0,  // 37: vxlan.vxlan.AddListener:output_type -> vxlan.Empty
	0,  // 38: vxlan.vxlan.RemoveListener:output_type -> vxlan.Empty
	0,  // 39: vxlan.vxlan.SetListenerMaxMessageSize:output_type -> vxlan.Empty
	6,  // 40: vxlan.vxlan.GetListenerMaxMessageSize:output_type -> vxlan.ListenerMaxMessageSizeReply
	8,  // 41: vxlan.vxlan.ListInterfaces:output_type -> vxlan.ListInterfacesReply
	0,  // 42: vxlan.vxlan.AddInterface:output_type -> vxlan.Empty
	0,  // 43: vxlan.vxlan.RemoveInterface:output_type -> vxlan.Empty
	0,  // 44: vxlan.vxlan.SetInterfaceMTU:output_type -> vxlan.Empty
	12, // 45: vxlan.vxlan.GetInterfaceMTU:output_type -> vxlan.InterfaceMTUReply
	0,  // 46: vxlan.vxlan.SetInterfaceMACAddress:output_type -> vxlan.Empty
	14, // 47: vxlan.vxlan.GetInterfaceMACAddress:output_type -> vxlan.InterfaceMACAddressReply
	0,  // 48: vxlan.vxlan.SetInterfaceIPAddresses:output_type -> vxlan.Empty
	16, // 49: vxlan.vxlan.GetInterfaceIPAddresses:output_type -> vxlan.InterfaceIPAddressesReply
	0,  // 50: vxlan.vxlan.InterfaceAddMACEntry:output_type -> vxlan.Empty
	0,  // 51: vxlan.vxlan.InterfaceRemoveMACEntry:output_type -> vxlan.Empty
	20, // 52: vxlan.vxlan.InterfaceGetMACEntries:output_type -> vxlan.InterfaceMacEntryReply
	0,  // 53: vxlan.vxlan.InterfaceFlushMACTable:output_type -> vxlan.Empty
	0,  // 54: vxlan.vxlan.InterfaceAddStaticRoute:output_type -> vxlan.Empty
	0,  // 55: vxlan.vxlan.InterfaceRemoveStaticRoute:output_type -> vxlan.Empty
	24, // 56: vxlan.vxlan.InterfaceGetStaticRoutes:output_type -> vxlan.InterfaceStaticRouteReply
	0,  // 57: vxlan.vxlan.InterfaceAddStaticARPEntry:output_type -> vxlan.Empty
	0,  // 58: vxlan.vxlan.InterfaceRemoveARPEntry:output_type -> vxlan.Empty
	28, // 59: vxlan.vxlan.InterfaceGetARPEntries:output_type -> vxlan.InterfaceArpEntryReply
	0,  // 60: vxlan.vxlan.InterfaceFlushARPTable:output_type -> vxlan.Empty
	33, // [33:61] is the sub-list for method output_type
	5,  // [5:33] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_vxlan_vxlan_proto_init() }
func file_vxlan_vxlan_proto_init() {
	if File_vxlan_vxlan_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vxlan_vxlan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vxlan_vxlan_proto_goTypes,
		DependencyIndexes: file_vxlan_vxlan_proto_depIdxs,
		MessageInfos:      file_vxlan_vxlan_proto_msgTypes,
	}.Build()
	File_vxlan_vxlan_proto = out.File
	file_vxlan_vxlan_proto_rawDesc = nil
	file_vxlan_vxlan_proto_goTypes = nil
	file_vxlan_vxlan_proto_depIdxs = nil
}
